package org.jooq.mcve.test.scala.postgres

import org.jooq.impl.DSL
import org.jooq.mcve.scala.postgres.Tables.TEST
import org.jooq.tools.JooqLogger
import org.jooq.{DSLContext, SQLDialect}
import org.junit.Assert.{assertEquals, assertNotNull}
import org.junit._

import java.sql.{Connection, DriverManager}
import java.util.Properties

object ScalaTest {
  val log = JooqLogger.getLogger(classOf[ScalaTest])
  var connection: Connection = null
  var ctx: DSLContext = null

  @BeforeClass
  def init(): Unit = {
    val properties = new Properties
    properties.setProperty("username", "postgres")
    properties.setProperty("password", "postgres")
    log.info("Connecting")
    connection = DriverManager.getConnection(System.getProperty("db.url"), System.getProperty("db.username"), System.getProperty("db.password"))
    ctx = DSL.using(connection, SQLDialect.POSTGRES)
    log.info("Finished setup")
  }
}

class ScalaTest {

  def ctx(): DSLContext = ScalaTest.ctx

  @Before
  def setup(): Unit = {
    ctx().delete(TEST).execute
  }

  @After
  def after(): Unit = {}

  @Test
  def mcveTest(): Unit = {
    assertEquals(1, ctx()
      .insertInto(TEST)
      .columns(TEST.CD)
      .values(42)
      .execute()
    )

    val record = ctx.fetchOne(TEST, TEST.CD.eq(42))
    assertNotNull(record.getId)
  }
}
